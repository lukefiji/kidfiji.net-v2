/*
* atGrid.css v3.1.1 - CSS Grid System with HTML Attributes
* https://github.com/jameskolce/atGrid
* Copyright 2016 James Kolce <contact@jameskolce.com>
* Licensed under MIT License (https://github.com/jameskolce/atGrid/blob/master/LICENSE)
*/

// CONFIGURATION
// ==========================================================================

// Max width for container
$container-width: 1200px !default;

// Gutter size in pixels
$gutter: 32px !default;

// Number of columns in a row
$num-columns: 12 !default;

// Prefix for attributes
$prefix: '' !default;

// Create the columns after this breakpoint
// Set to 0 to create columns for all viewport sizes
$breakpoint: false !default;

// If you ONLY want to use the mixins for "semantic grids" set this to true
$only-semantic: false !default;

// MIXINS - You can use this to create "semantic grids"
// ==========================================================================

//
// Container
//
// Use this mixin to create a container.
//

@mixin ag-container($width: $container-width, $padding:($gutter/2)) {
  box-sizing: border-box;
  margin-left: auto;
  margin-right: auto;
  max-width: $width;
  padding-left: $padding;
  padding-right: $padding;
  width: 100%;

  &:before,
  &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
  }
}

//
// Columns
//
// Use this mixin to create a column
//
// @size = The size of the column, should be a number between 0 and 1. Example: 1/2
// @offset = The desplacement of the column to the right, should be a number between 0 and 1 - column-size. Example: 1/6
// @gutters = Set to false if you don't want gutters for the column
//

@mixin ag-column($size, $offset: 0, $gutters: true) {
  box-sizing: border-box;
  float: left;

  @if $breakpoint {
    width: 100%;
    @media (min-width: $breakpoint) { width: $size * 100%; }
  } @else {
    width: $size * 100%;
  }

  @if $offset > 0 {
    margin-left: $offset * 100%;
  }

  @if $gutters {
    padding-left: ($gutter/2);
    padding-right: ($gutter/2);
  }
}

//
// Column widths and offsets
//
// Creates the width of the columns and their offset
//

@mixin columns() {
  // Create columns
  @for $i from 1 through $num-columns {
    [#{$prefix}column~="#{$i}"] {
      width: ($i/$num-columns) * 100%;
    }
  }

  // Offset for columns
  @for $i from 1 through ($num-columns - 1) {
    [#{$prefix}column~="+#{$i}"] {
      margin-left: ($i/$num-columns) * 100%;
    }
  }
}

// STYLES
// ==========================================================================

@if not $only-semantic {

  //
  // General styles
  //
  // Basic styles for the container and columns
  //

  [#{$prefix}container] {
    @include ag-container();
  }

  [#{$prefix}column] {
    @include ag-column(1);
  }

  // Create the columns inside a media query if there is a breakpoint
  @if $breakpoint {
    @media (min-width: $breakpoint) {
      @include columns();
    }
  } @else {
    @include columns();
  }

  //
  // Columns without gutters
  //

  [#{$prefix}column~='no-gutter'] {
    padding-left: 0;
    padding-right: 0;
  }
}
